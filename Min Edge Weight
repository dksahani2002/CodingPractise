#include <bits/stdc++.h>
using namespace std;
#define int long long int
int n ,ans ; 
int par[100100];
int ran[100100];
int sizAp[100100];

int find(int x){
    if(par[x]==-1){
        return x;
    }
    return par[x]=find(par[x]);
}

void uni(int x , int y , int wt){
     
    int apx=find(x);
    int apy=find(y);
    if(apx==apy)return;
    if(ran[apx]>ran[apy]){
        
        ans+=wt*sizAp[apx]*sizAp[apy];
        sizAp[apx]+=sizAp[apy];
        par[apy]=apx;
        
    }
    else if(ran[apx]<ran[apy]){
        par[apx]=apy;
        ans+=wt*sizAp[apx]*sizAp[apy];
        sizAp[apy]+=sizAp[apx];
    }
    else{
        par[apx]=apy;
        ran[apy]+=1;
        ans+=wt*sizAp[apx]*sizAp[apy];
        sizAp[apy]+=sizAp[apx];
        //sizAp[apx]+=1;
    }  
}
 

signed main() {
	int t;
	cin>>t;
	while(t--){ 
	   cin>>n; 
	   vector<pair<int,pair<int,int>>>edge(n-1);
	    for(int i=0;i<n-1;i++){
	        int a,b,c;
	        cin>>a>>b>>c;
	        edge[i]={c,{a,b}};
	    }
	    sort(edge.begin(),edge.end());
	    reverse(edge.begin(),edge.end());
	    
	    for(int i=1;i<=n;i++){
	        par[i]=-1;
	        ran[i]=0;
	        sizAp[i]=1;
	    }
	     
	    ans=0;
	     
	    for(auto v : edge){
	        int wt = v.first; 
	        int node1 = v.second.first;
	        int node2 = v.second.second; 
	        uni(node1,node2,wt);  
	    } 
	   cout<<ans<<endl;  
	}
	return 0;
}
