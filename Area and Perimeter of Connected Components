#include <bits/stdc++.h>
using namespace std;
int n;
vector<string>g;
int vis[1001][1001];
int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1};
bool check(int x ,int y){
    if(x>=0 && x<n && y>=0 && y<n){
        return 1;
    }
    else{
        return 0;
    } 
}
map<int,int>ar,pr;
void bfs(int i,int j,int component){
    vis[i][j]=1;
    ar[component]++;
    for(int k=0;k<4;k++){
        int x=i+dx[k];
        int y=j+dy[k];
        
        if(!vis[x][y] && check(x,y) && g[x][y]=='#'){
            bfs(x,y,component);
        }
        else{
            if(x<0 || y<0 || x>=n || y>=n | g[x][y]=='.'){
                pr[component]++;
            } 
        }
    }
}
int main() {
	cin>>n;
	g.resize(n);
	for(int i=0;i<n;i++){
	    cin>>g[i];
	}
	memset(vis,0,sizeof(vis));
	int cmpno=0;
	for(int i=0;i<n;i++){
	    for(int j=0;j<n;j++){
	        if(!vis[i][j] && g[i][j]=='#'){
	            bfs(i,j,cmpno);
	            cmpno++;
	        }
	    }
	}
	//int max_area=-1e8;
	//cout<<cmpno<<endl;
	priority_queue<pair<int,int>>pq;
	for(int i=0;i<cmpno;i++){
	     pq.push({ar[i],pr[i]}); 
	}
	int area=0,perimeter=0;
	area=pq.top().first;
	perimeter=pq.top().second;
	pq.pop();
	while(area==pq.top().first && !pq.empty()){
	    perimeter=min(perimeter , pq.top().second);
	    pq.pop();
	}
	
	cout<<area<<" "<<perimeter<<endl;
	return 0;
}
