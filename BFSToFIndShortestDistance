#include <bits/stdc++.h>
using namespace std;
#define F first
#define S second
using State=pair<int,int>;
int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1};

int dis[1001][1001];  
int n,m; 
vector<string>arr;

bool check(int x,int y){
    if(x<0||x>=n || y<0 || y>=m || arr[x][y]=='#')return 0;
    else return 1;
}

 void bfs(State st){
     for(int i=0;i<n;i++){
         for(int j=0;j<m;j++){
              dis[i][j]=1e9;
         } 
     }
     dis[st.F][st.S]=0; 
     queue<State>q;
     q.push(st);
     while(!q.empty()){
         State curnode=q.front(); q.pop();
         int curdis=dis[curnode.F][curnode.S];
         for(int k=0;k<4;k++){
             State v = {curnode.F +dx[k],curnode.S+dy[k]};
             if(check(v.F,v.S) && dis[v.F][v.S]>curdis+1){
                 dis[v.F][v.S]=curdis+1;
                 q.push(v);
             }
         }
     }
 }
void solve(){
    cin>>n>>m; 
    arr.resize(n);
    for(int i=0;i<n;i++){
         cin>>arr[i];
    } 
    State st;cin>>st.F>>st.S;
    bfs(st);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cout<<"\t"<<dis[i][j]<<" ";
        }
        cout<<endl;
    }
}
int main() {
    solve();
	return 0;
}
