#include <bits/stdc++.h>
using namespace std;

int n,m;

priority_queue<pair<long long int,pair<int,int>>>pq;

int parent[100100];
int ran[100100];
 
int find(int v){
    if(parent[v]==-1){
        return v;
    }
     return parent[v] = find(parent[v]);
}

void uni(int from , int to){
    
    if(ran[from]>ran[to]){
        parent[to]=from;
    }
    else if(ran[from]<ran[to]){
        parent[from]=to;
    }
    else{
        parent[from]=to;
        ran[to]+=1;
    } 
}

bool checkCycle(int f , int t){
    int Apf = find(f);
    int Apt = find(t);
    if(Apt==Apf){
         return 1;
    } 
    uni(Apf,Apt); 
    return 0;
}

int main() {
    cin>>n>>m;
    for(int i=0;i<m;i++){
        int a,b,c;
        cin>>a>>b>>c;
        pq.push({-c,{a,b}});
    }
    
    
    for(int i=1;i<=n;i++){
        parent[i]=-1;
        ran[i]=0;
    }
    long long int cost=0;
    int k=1;
    while(!pq.empty() && k<n){
        pair<long long int,pair<int,int>>p;
        p=pq.top();
        pq.pop();
        if(!checkCycle(p.second.first , p.second.second)){
            cost+=-p.first;
            k++;
        }
    }
    if(k==n){
        cout<<cost<<endl;
    }
    else cout<<"IMPOSSIBLE\n";
	return 0;
}
