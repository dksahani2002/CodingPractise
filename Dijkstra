#include <bits/stdc++.h>
using namespace std;
using ii = pair<int,int>;
int n,m;
#define MP make_pair
#define F first 
#define S second
vector<ii>g[100100];
int dis[100100];
int vis[100100];

// class priortise{
//     public: bool operator()(
//         ii &p,ii&q){
//             return p.S>q.S;
//         }
// };
void dijkstra(int sc){
    for(int i=1;i<=n;i++){
        dis[i]=1e9;
        vis[i]=0;
    }
    dis[sc]=0;
    priority_queue<ii>pq;
    pq.push(MP(0,sc));
    while(!pq.empty()){
        ii fs=pq.top();pq.pop();
        if(vis[fs.S])continue;
        vis[fs.S]=1;
        for(auto v:g[fs.S]){
            int neigh =v.F;
            int wt=v.S;
            if(dis[neigh]>dis[fs.S]+wt){
                dis[neigh]=dis[fs.S]+wt;
                pq.push(MP(-dis[neigh],neigh));
            }
        }
        
    }
}
void solve(){
    cin>>n>>m;
    for(int i=0;i<m;i++){
        int a,b,c;
        cin>>a>>b>>c;
        g[a].push_back({b,c});
        g[b].push_back({a,c});
    }
    int sc;
    cin>>sc;
    dijkstra(sc);
    for(int i=1;i<=n;i++){
        cout<<dis[i]<<"\n";
    } 
}
int main() {
	solve();
	return 0;
}
