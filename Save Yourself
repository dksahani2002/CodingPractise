#include <bits/stdc++.h>
using namespace std;
int n,m;
vector<string>g; 
vector<pair<int,int>>en,source;
int dism[1001][1001];
int disp[1001][1001];
int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1};
 
bool check(int x , int y){
    if(x>=0 && x<n && y>=0 && y<m && g[x][y]!='#')return 1;
    else return 0;
} 
void bfs(int x , int y){
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            dism[i][j]=1e9;
        }
    }
    deque<pair<int,int>>dq;
    for(auto v:source){
        dism[v.first][v.second]=0;
        dq.push_back(v);
    }
    while(!dq.empty()){
        pair<int,int>p;
        p=dq.front();dq.pop_front();
        int curd=dism[p.first][p.second];
        for(int i=0;i<4;i++){
            int a=p.first+dx[i];
            int b=p.second+dy[i];
            if(check(a, b) ){
                if(dism[a][b]>curd+1){
                    dism[a][b]=curd+1;
                    dq.push_back({a,b});
                }
                else if(dism[a][b]==curd+1){
                    dq.push_front({a,b});
                }
            } 
        }
    }
}



void bfsA(int x , int y){
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            disp[i][j]=1e9;
        }
    }
    disp[x][y]=0;
    deque<pair<int,int>>dq;
    dq.push_front({x,y});
    while(!dq.empty()){
        pair<int,int>p;
        p=dq.front();dq.pop_front();
        int curd=disp[p.first][p.second];
        for(int i=0;i<4;i++){
            int a=p.first+dx[i];
            int b=p.second+dy[i];
            if(check(a, b) ){
                if(disp[a][b]>curd+1){
                    disp[a][b]=curd+1;
                    dq.push_back({a,b});
                } 
            } 
        }
    }
}



int main() {
	 cin>>n>>m;
	 g.resize(n);
	 for(int i=0;i<n;i++){ 
	      cin>>g[i];   
	 }
	 
	 deque<pair<int,int>>dq;
	 for(int i=0;i<n;i++){
	     for(int j=0;j<m;j++){
	         if(g[i][j]=='M'){
                source.push_back({i,j}); 
	         }
	         if(g[i][j]=='A'){
	             bfsA(i,j);
	         }
	         if((i==0 || i==n-1) && (g[i][j]=='.' || g[i][j]=='A')){
	             if(g[i][j]=='A'){
	                 cout<<"YES\n0\n";
	                 return 0;
	             }
	             en.push_back({i,j});
	         }
	         else if((j==0 || j==m-1) && (g[i][j]=='.' || g[i][j]=='A')){
	             if(g[i][j]=='A'){
	                 cout<<"YES\n0\n";
	                 return 0;
	             }
	             en.push_back({i,j});
	         }
	     }
	 } 
	 pair<int,int>st;
	 st=dq.front();
	 bfs(st.first,st.second);
	 int minPath=1e9,flag=0;
	 for(auto v:en){
	     if((disp[v.first][v.second]<dism[v.first][v.second]) && (dism[v.first][v.second]!=1e9 && disp[v.first][v.second]!=1e9)){
	         minPath=min(minPath,disp[v.first][v.second]);
	         flag=1;
	     }
	 }
	 if(flag==1){
	     cout<<"YES\n";
	         cout<<minPath<<endl;
	         return 0;
	 }
	 else{
	    cout<<"NO\n";     
	 }
	return 0;
}
